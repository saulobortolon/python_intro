

We can also create a nested list, as we did in Chapter 2, and convert it to an array:
!bc pyshell
>>> Cdegrees = [-30 + i*10 for i in range(3)]
>>> Fdegrees = [9./5*C + 32 for C in Cdegrees]
>>> table = [[C, F] for C, F in zip(Cdegrees, Fdegrees)]
>>> print table
[[-30, -22.0], [-20, -4.0], [-10, 14.0]]
>>> table2 = array(table)
>>> print table2
[[-30. -22.]
 [-20.  -4.]
 [-10.  14.]]
!ec



=== Summary of useful array functionality. ===

|-------------c-----------------------------------------c-------------------------------|
| Construction              | Meaning                                                   |
|-------------l-----------------------------------------l-------------------------------|
| `array(ld)`               | copy list data `ld` to a `numpy` array                    |
| `asarray(d)`              | make array of data `d` (no data copy if already array)    |
| `zeros(n)`                | make a `float` vector/array of length `n`, with zeros     |
| `zeros(n, int)`           | make an `int` vector/array of length `n` with zeros       |
| `zeros((m,n))`            | make a two-dimensional `float` array with shape (`m`,`n`) |
| `zeros_like(x)`           | make array of same shape and element type as `x`          |
| `linspace(a,b,m)`         | uniform sequence of `m` numbers in $[a,b]$                |
| `a.shape`                 | tuple containing `a`'s shape                              |
| `a.size`                  | total no of elements in `a`                               |
| `len(a)`                  | length of a one-dim. array `a` (same as `a.shape[0]`)     |
| `a.dtype`                 | the type of elements in `a`                               |
| `a.reshape(3,2)`          | return `a` reshaped as $3\times 2$ array                  |
| `a[i]`                    | vector indexing                                           |
| `a[i,j]`                  | two-dim. array indexing                                   |
| `a[1:k]`                  | slice: reference data with indices `1`,\ldots,`k-1`       |
| `a[1:8:3]`                | slice: reference data with indices `1`, `4`,\ldots,`7`    |
| `b = a.copy()`            | copy an array                                             |
| `sin(a), exp(a), ...`     | `numpy` functions applicable to arrays                    |
| `c = concatenate((a, b))` | `c` contains `a` with `b` appended                        |
| `c = where(cond, a1, a2)` | `c[i] = a1[i]` if `cond[i]`, else `c[i] = a2[i]`          |
| `isinstance(a, ndarray)`  | is `True` if `a` is an array                              |
|---------------------------------------------------------------------------------------|
