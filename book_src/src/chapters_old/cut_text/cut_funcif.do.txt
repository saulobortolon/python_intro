
======= A summarizing example for Chapter 3 =======
The following example illustrates most of the ideas from this chapter, and may
be useful to read through to make sure you understand the new topics.
An integral on the form

!bt
\[
\int_a^b f(x)dx
\]
!et
can be approximated by *Simpson's rule*:

!bt
\begin{align*}
\int_a^b f(x)dx \approx \frac{b-a}{3n}\biggl(
& f(a) + f(b) + 4\sum_{i=1}^{n/2} f(a + (2i-1)h)\\
& + 2\sum_{i=1}^{n/2-1} f(a+2ih)\biggr)
\end{align*}
!et

*Problem:* make a function `Simpson(f, a, b, n=500)` for
computing an integral of `f(x)` by Simpson's rule.
Call `Simpson(...)` for $\frac{3}{2}\int_0^\pi\sin^3x dx$ (exact
value: 2) for $n=2,6,12,100,500$.

=== Function, simplest version. ===

!bc pycod
def Simpson(f, a, b, n=500):
    """
    Return the approximation of the integral of f
    from a to b using Simpson's rule with n intervals.
    """

    h = (b - a)/float(n)

    sum1 = 0
    for i in range(1, n/2 + 1):
        sum1 += f(a + (2*i-1)*h)

    sum2 = 0
    for i in range(1, n/2):
        sum2 += f(a + 2*i*h)

    integral = (b-a)/(3*n)*(f(a) + f(b) + 4*sum1 + 2*sum2)
    return integral
!ec

=== Improved function, with test for possible errors. ===
Simpson's rule only works for even values of $n$, and the function above will fail if we provide it an uneven argument `n`.
We can improve the function by checking if `n` is an even integer, and make a correction if it is not.

!bc pycod
def Simpson(f, a, b, n=500):

    if a > b:
        print 'Error: a=%g > b=%g' % (a, b)
        return None

    # Check that n is even
    if n % 2 != 0:
        print 'Error: n=%d is not an even integer!' % n
        n = n+1  # make n even

# #if FORMAT == 'ipynb'
    h = (b - a)/float(n)

    sum1 = 0
    for i in range(1, n/2 + 1):
        sum1 += f(a + (2*i-1)*h)

    sum2 = 0
    for i in range(1, n/2):
        sum2 += f(a + 2*i*h)

    integral = (b-a)/(3*n)*(f(a) + f(b) + 4*sum1 + 2*sum2)
# #else
    # as before...
    ...
# #endif
    return integral
!ec

=== The main program. ===
Here we actually apply the function to compute the given integral:
!bc pycod
def h(x):
    return (3./2)*sin(x)**3

from math import sin, pi

print('Integral of 1.5*sin^3 from 0 to pi:')
for n in 2, 6, 12, 100, 500:
    approx = Simpson(h, 0, pi, n)
    print(f'n={n}, approx={approx}, error={2-approx}')
!ec

=== A test function to test the `Simpson` function. ===
Finally, we write a test function to verify that our `Simpson` function works as it should. To create the test, we
utilize the known property of Simpson's rule that 2nd degree polynomials are integrated exactly.

!bc pycod
def test_Simpson():      # rule: no arguments
    """Check that quadratic functions are integrated exactly."""
    a = 1.5
    b = 2.0
    n = 8
    g = lambda x: 3*x**2 - 7*x + 2.5       # test integrand
    G = lambda x: x**3 - 3.5*x**2 + 2.5*x  # integral of g
    exact = G(b) - G(a)
    approx = Simpson(g, a, b, n)
    success = abs(exact - approx) < 1E-14  # tolerance for floats
    msg = f'exact={exact}, approx={approx}'
    assert success, msg
!ec
We can now either include a call to `test_Simpson()` in the `.py`-file, or use pytest:

!bc sys
Terminal> pytest Simpson.py
...
Ran 1 test in 0.005s

OK
!ec
